package com.example.simplenotesapp.model

// Import statements for Room persistence library annotations.
// @Entity is used to mark a class as a table in the Room database.
// @PrimaryKey is used to denote the primary key field(s) of the entity.
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a single note entity in the application.
 * This data class is used by Room to create the 'notes' table in the database.
 * Each instance of this class corresponds to a row in the 'notes' table.
 *
 * @property id The unique identifier for the note. It's the primary key and is auto-generated by Room.
 *              Defaults to 0, which Room interprets as "not set" for auto-generation purposes.
 * @property title The title of the note.
 * @property content The main content or body of the note.
 * @property timestamp The time when the note was created or last modified, stored as milliseconds since epoch.
 *                     Defaults to the current system time when a new Note object is instantiated.
 * @property isDeleted A flag indicating whether the note has been "soft-deleted".
 *                     `false` means the note is active, `true` means it's considered deleted (but still in the DB).
 *                     Defaults to `false`.
 */
@Entity(tableName = "notes") // Marks this class as a Room entity, specifying the table name as "notes".
data class Note(
    @PrimaryKey(autoGenerate = true) // Marks 'id' as the primary key for the 'notes' table.
    // autoGenerate = true tells Room to automatically generate unique IDs.
    val id: Int = 0,

    val title: String, // Represents the 'title' column in the 'notes' table.

    val content: String, // Represents the 'content' column in the 'notes' table.

    val timestamp: Long = System.currentTimeMillis(), // Represents the 'timestamp' column.
    // Defaults to the current time if not specified.

    val isDeleted: Boolean = false // Represents the 'isDeleted' column, used for soft deletes.
    // Defaults to false (active note) if not specified.
)
